/*
      This file is part of Smoothie (http://smoothieware.org/). The motion control part is heavily based on Grbl (https://github.com/simen/grbl).
      Smoothie is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
      Smoothie is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
      You should have received a copy of the GNU General Public License along with Smoothie. If not, see <http://www.gnu.org/licenses/>.
*/

#include "libs/Kernel.h"
#include "Panel.h"
#include "PanelScreen.h"
#include "LcdBase.h"
#include "MainMenuScreen.h"
#include "WatchScreen.h"
#include "FileScreen.h"
#include "JogScreen.h"
#include "JogScreenBasic.h"
#include "ControlScreen.h"
#include "PrepareScreen.h"
#include "ProbeScreen.h"
#include "libs/nuts_bolts.h"
#include "libs/utils.h"
#include "modules/utils/player/PlayerPublicAccess.h"
#include "PublicData.h"
#include "checksumm.h"
#include "ModifyValuesScreen.h"
#include "Robot.h"
#include "Planner.h"
#include "StepperMotor.h"
#include "EndstopsPublicAccess.h"

#include <string>
using namespace std;

#define menu_logo_antipixel_width 45
#define menu_logo_antipixel_height 45
static const uint8_t info_logo_antipixel_bits[] = { 
0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,
0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x1f,0xe0,0x00,0x07,0x00,0x00,0xff,0xfc,0x00,0x07,0x00,0x03,0xff,0xff,0x00,0x07,
0x00,0x0f,0xff,0xff,0x80,0x07,0x00,0x1f,0xc0,0x0f,0xc0,0x07,0x00,0x3f,0x00,0x03,0xe0,0x07,0x00,0x7c,0x00,0x01,0xf0,0x07,
0x00,0xf8,0x00,0x00,0xf8,0x07,0x00,0xf0,0x03,0x00,0x7c,0x07,0x01,0xe0,0x07,0x80,0x3c,0x07,0x01,0xe0,0x07,0x80,0x1e,0x07,
0x03,0xc0,0x07,0x80,0x1e,0x07,0x03,0xc0,0x03,0x00,0x0e,0x07,0x03,0x80,0x00,0x00,0x0f,0x07,0x07,0x80,0x0f,0x80,0x0f,0x07,
0x07,0x80,0x0f,0x80,0x0f,0x07,0x07,0x80,0x0f,0x80,0x0f,0x07,0x07,0x80,0x07,0x80,0x0f,0x07,0x07,0x80,0x07,0x80,0x0f,0x07,
0x07,0x80,0x07,0x80,0x0f,0x07,0x07,0x80,0x07,0x80,0x0f,0x07,0x03,0x80,0x07,0x80,0x0f,0x07,0x03,0xc0,0x07,0x80,0x0e,0x07,
0x03,0xc0,0x07,0x80,0x1e,0x07,0x01,0xe0,0x07,0x80,0x1e,0x07,0x01,0xe0,0x07,0x80,0x3c,0x07,0x00,0xf0,0x00,0x00,0x7c,0x07,
0x00,0xf8,0x00,0x00,0xf8,0x07,0x00,0x7c,0x00,0x01,0xf0,0x07,0x00,0x3f,0x00,0x03,0xe0,0x07,0x00,0x1f,0xc0,0x0f,0xc0,0x07,
0x00,0x0f,0xff,0xff,0x80,0x07,0x00,0x03,0xff,0xff,0x00,0x07,0x00,0x00,0xff,0xfc,0x00,0x07,0x00,0x00,0x1f,0xe0,0x00,0x07,
0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,
0x00,0x00,0x00,0x00,0x00,0x07, 
};
static const uint8_t play_logo_antipixel_bits[] = { 
0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0xff,0xfe,0x00,0x00,0x07,
0x01,0xff,0xfe,0x38,0x00,0x07,0x03,0xff,0xfe,0x3c,0x00,0x07,0x03,0xff,0xfe,0x3e,0x00,0x07,0x03,0xff,0xfe,0x3f,0x00,0x07,
0x03,0xff,0xfe,0x3f,0x80,0x07,0x03,0xff,0xfe,0x3f,0xc0,0x07,0x03,0xff,0xfe,0x3f,0xe0,0x07,0x03,0xff,0xfe,0x3f,0xf0,0x07,
0x03,0xff,0xfe,0x3f,0xf8,0x07,0x03,0xff,0xfe,0x3f,0xfc,0x07,0x03,0xff,0xff,0x3f,0xfc,0x07,0x03,0xff,0xff,0x00,0x00,0x07,
0x03,0xff,0xff,0x80,0x00,0x07,0x03,0xff,0xff,0xe0,0x00,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,
0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,
0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xf8,0x00,0x00,0xfe,0x07,0x03,0xf8,0x00,0x00,0xfe,0x07,
0x03,0xf8,0x00,0x00,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,
0x03,0xf8,0x00,0x00,0xfe,0x07,0x03,0xf8,0x00,0x00,0xfe,0x07,0x03,0xf8,0x00,0x00,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,
0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,0x03,0xff,0xff,0xff,0xfe,0x07,
0x01,0xff,0xff,0xff,0xfc,0x07,0x00,0xff,0xff,0xff,0xf8,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,
0x00,0x00,0x00,0x00,0x00,0x07, 
};
static const uint8_t move_logo_antipixel_bits[] = { 
0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x02,0x00,0x00,0x07,0x00,0x00,0x07,0x00,0x00,0x07,0x00,0x00,0x0f,0x80,0x00,0x07,
0x00,0x00,0x1f,0xc0,0x00,0x07,0x00,0x00,0x3f,0xe0,0x00,0x07,0x00,0x00,0x7f,0xf0,0x00,0x07,0x00,0x00,0xff,0xf8,0x00,0x07,
0x00,0x01,0xff,0xfc,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,
0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x0f,0x80,0x00,0x07,0x00,0x80,0x3f,0xe0,0x08,0x07,
0x01,0x80,0x7f,0xf0,0x0c,0x07,0x03,0x80,0xf0,0x78,0x0e,0x07,0x07,0x81,0xe0,0x3c,0x0f,0x07,0x0f,0x81,0xc0,0x1c,0x0f,0x87,
0x1f,0x83,0x80,0x0e,0x0f,0xc7,0x3f,0x83,0x80,0x0e,0x0f,0xe7,0x7f,0x83,0x80,0x0e,0x0f,0xf7,0x3f,0x83,0x80,0x0e,0x0f,0xe7,
0x1f,0x83,0x80,0x0e,0x0f,0xc7,0x0f,0x81,0xc0,0x1c,0x0f,0x87,0x07,0x81,0xe0,0x3c,0x0f,0x07,0x03,0x80,0xf0,0x78,0x0e,0x07,
0x01,0x80,0x7f,0xf0,0x0c,0x07,0x00,0x80,0x3f,0xe0,0x08,0x07,0x00,0x00,0x0f,0x80,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,
0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x07,
0x00,0x01,0xff,0xfc,0x00,0x07,0x00,0x00,0xff,0xf8,0x00,0x07,0x00,0x00,0x7f,0xf0,0x00,0x07,0x00,0x00,0x3f,0xe0,0x00,0x07,
0x00,0x00,0x1f,0xc0,0x00,0x07,0x00,0x00,0x0f,0x80,0x00,0x07,0x00,0x00,0x07,0x00,0x00,0x07,0x00,0x00,0x02,0x00,0x00,0x07,
0x00,0x00,0x00,0x00,0x00,0x07, 
};
static const uint8_t prepere_logo_antipixel_bits[] = { 
0x00,0x00,0x00,0x00,0x00,0x07,0x07,0xe0,0x00,0x00,0x01,0xc7,0x07,0xf8,0x00,0x00,0x03,0xe7,0x01,0xf8,0x00,0x00,0x07,0xf7,
0x00,0xfc,0x00,0x00,0x0f,0xf7,0x00,0x7c,0x00,0x00,0x0f,0xf7,0x00,0x7c,0x00,0x00,0x1f,0xe7,0x00,0x7c,0x00,0x00,0x3f,0xc7,
0x40,0xfc,0x00,0x00,0x7f,0x87,0x71,0xfe,0x00,0x00,0xfe,0x07,0x7f,0xfe,0x00,0x01,0xfc,0x07,0x3f,0xff,0x00,0x03,0xf8,0x07,
0x1f,0xff,0x80,0x07,0xf0,0x07,0x1f,0xff,0xc0,0x0f,0xe0,0x07,0x07,0xff,0xe0,0x1f,0xc0,0x07,0x00,0x3f,0xf0,0x3f,0x80,0x07,
0x00,0x0f,0xf8,0x7f,0x00,0x07,0x00,0x07,0xc0,0xfe,0x00,0x07,0x00,0x03,0x9d,0xfc,0x00,0x07,0x00,0x01,0xbf,0xf8,0x00,0x07,
0x00,0x00,0xbf,0xf0,0x00,0x07,0x00,0x00,0x3f,0xe0,0x00,0x07,0x00,0x00,0x1f,0xc0,0x00,0x07,0x00,0x03,0xff,0xe0,0x00,0x07,
0x00,0x07,0xff,0xe8,0x00,0x07,0x00,0x0f,0xff,0xec,0x00,0x07,0x00,0x1f,0xfd,0xce,0x00,0x07,0x00,0x3f,0xfc,0x1f,0x00,0x07,
0x00,0x7f,0xfc,0xff,0x80,0x07,0x00,0xff,0xfc,0x7f,0xe0,0x07,0x01,0xff,0xfc,0x3f,0xff,0x07,0x03,0xff,0xf8,0x1f,0xff,0xc7,
0x07,0xff,0xf0,0x0f,0xff,0xc7,0x0f,0xff,0xe0,0x07,0xff,0xe7,0x1f,0xff,0xc0,0x03,0xff,0xf7,0x3f,0xff,0x80,0x03,0xf8,0x77,
0x7f,0xff,0x00,0x01,0xf8,0x17,0x7f,0xfe,0x00,0x01,0xf0,0x07,0x7f,0xfc,0x00,0x01,0xf0,0x07,0x3f,0xf8,0x00,0x01,0xf0,0x07,
0x1f,0xf0,0x00,0x01,0xf8,0x07,0x0f,0xe0,0x00,0x00,0xfc,0x07,0x07,0xc0,0x00,0x00,0xff,0x07,0x03,0x80,0x00,0x00,0x3f,0x07,
0x00,0x00,0x00,0x00,0x00,0x07, 
};

MainMenuScreen::MainMenuScreen()
{
    // Children screens
    this->jog_screen     = (new JogScreen()     )->set_parent(this);
	this->jog_screen_basic = (new JogScreenBasic())->set_parent(this);
    this->watch_screen   = (new WatchScreen()   )->set_parent(this);
    this->file_screen    = (new FileScreen()    )->set_parent(this);
    this->prepare_screen = (new PrepareScreen() )->set_parent(this);
    this->set_parent(this->watch_screen);
}

void MainMenuScreen::on_enter()
{
    THEPANEL->enter_main_menu_mode();
    THEPANEL->setup_main_menu(25);
    this->refresh_menu();
}

void MainMenuScreen::on_refresh()
{
    if ( THEPANEL->menu_change() ) {
        this->refresh_menu();
    }
    if ( THEPANEL->click() ) {
        this->clicked_menu_entry(THEPANEL->get_menu_current_line());
    }
}

void MainMenuScreen::display_menu_line(uint16_t line)
{
    switch ( line ) {
        case 0: THEPANEL->lcd->printf("Info Screen"); 
			if (THEPANEL->lcd->hasGraphics()) {
            THEPANEL->lcd->bltGlyph(41, 15, menu_logo_antipixel_width, menu_logo_antipixel_height, info_logo_antipixel_bits); } break;
        case 8: if(THEKERNEL->is_halted()) THEPANEL->lcd->printf("Clear HALT"); else THEPANEL->lcd->printf(THEPANEL->is_playing() ? "Abort" : "Play file"); 
			if (THEPANEL->lcd->hasGraphics()) {
            THEPANEL->lcd->bltGlyph(41, 15, menu_logo_antipixel_width, menu_logo_antipixel_height, play_logo_antipixel_bits); } break;
        case 16: THEPANEL->lcd->printf("Move Axis"); 
			if (THEPANEL->lcd->hasGraphics()) {
            THEPANEL->lcd->bltGlyph(41, 15, menu_logo_antipixel_width, menu_logo_antipixel_height, move_logo_antipixel_bits); } break;
        case 24: THEPANEL->lcd->printf("Prepare"); 
			if (THEPANEL->lcd->hasGraphics()) {
            THEPANEL->lcd->bltGlyph(41, 15, menu_logo_antipixel_width, menu_logo_antipixel_height, prepere_logo_antipixel_bits); } break;
        //case 4: THEPANEL->lcd->printf("Custom"); break;
        //case 5: THEPANEL->lcd->printf("Configure"); break;
        //case 6: THEPANEL->lcd->printf("Calibration"); break;
		
    }
}

void MainMenuScreen::clicked_menu_entry(uint16_t line)
{
    switch ( line ) {
		case 0: THEPANEL->enter_screen(this->watch_screen); break;
        case 8:	
            if(THEKERNEL->is_halted()){
                send_command("M999");
                THEPANEL->enter_screen(this->watch_screen);
            }else if(THEPANEL->is_playing()) abort_playing();
             else THEPANEL->enter_screen(this->file_screen); break;
        case 16: THEPANEL->enter_screen(this->jog_screen_basic ); break;
        case 24: THEPANEL->enter_screen(this->prepare_screen ); break;
        //case 4: THEPANEL->enter_screen(THEPANEL->custom_screen ); break;
        //case 5: setupConfigureScreen(); break;
		//case 6: THEPANEL->enter_screen((new ProbeScreen())->set_parent(this)); break;
		}
}

void MainMenuScreen::abort_playing()
{
    //PublicData::set_value(player_checksum, abort_play_checksum, NULL);
    send_command("abort");
    THEPANEL->enter_screen(this->watch_screen);
}

